import { useState, useEffect } from "react";
import { StyleSheet, View } from "react-native";
import { 
  insertDay, 
  insertSymptom, 
  insertMood,
  getDay, 
  getSymptom, 
  getMood,
  getSymptomEntriesForDay,
  getMoodEntriesForDay, 
  getSymptomByID,
  getMoodByID,
  deleteSymptomEntry, 
  deleteMoodEntry,
  insertSymptomEntry, 
  insertMoodEntry
} from "@/db/database";
import {
  List,
  Button,
  Text,
  useTheme,
  RadioButton,
  Divider,
  TextInput,
  Chip
} from "react-native-paper";
import { symptomOptions } from "@/constants/Symptoms";
import { moodOptions } from "@/constants/Moods";

const flowOptions = ["None", "Spotting", "Light", "Medium", "Heavy"];

// radio buttons adapted from code generated by ChatGPT-4o
function FlowRadioButtons({
  selectedOption,
  setSelectedOption,
}: {
  selectedOption: number;
  setSelectedOption: (option: number) => void;
}) {
  const theme = useTheme();
  
  return (
    <View style={{ width: "100%" }}>
      <RadioButton.Group
        value={flowOptions[selectedOption]}
        onValueChange={(value) => setSelectedOption(flowOptions.indexOf(value))}
      >
        {flowOptions.map((button, index) => (
          <RadioButton.Item
            key={button}
            label={button}
            value={button}
            labelStyle={{
              color: selectedOption === index
                ? theme.colors.onSecondaryContainer
                : theme.colors.onSurfaceVariant,
            }}            
          ></RadioButton.Item>
        ))}
      </RadioButton.Group>
    </View>
  );
}

function ChipSelection({
  options,
  selectedValues,
  setSelectedValues,
  label,
}: {
  options: { label: string; value: string }[];
  selectedValues: string[];
  setSelectedValues: React.Dispatch<React.SetStateAction<string[]>>;
  label: string;
}) {
  const theme = useTheme();

  return (
    <View style={{ padding: 16 }}>
      <Text style={styles.sectionLabel}>{label}</Text>
      <View style={styles.chipContainer}>
        {options.map((option) => (
          <Chip
            mode="outlined"
            key={option.value}
            selected={selectedValues.includes(option.value)}
            showSelectedCheck={false}
            onPress={() => {
              setSelectedValues((prev) =>
                prev.includes(option.value)
                  ? prev.filter((val) => val !== option.value)
                  : [...prev, option.value]
              );
            }}
            style={{
              backgroundColor: selectedValues.includes(option.value)
                ? theme.colors.onSecondary
                : theme.colors.secondary,
              margin: 4,
            }}
            textStyle={{
              color: selectedValues.includes(option.value)
                ? theme.colors.onSecondaryContainer
                : theme.colors.secondaryContainer,
            }}
          >
            {option.label}
          </Chip>
        ))}
      </View>
    </View>
  );
}

export default function DayView({
  date,
  dateFlow,
}: {
  date: string;
  dateFlow: number;
}) {
  const theme = useTheme();
  const [flow, setFlow] = useState<number>(dateFlow);
  const [notes, setNotes] = useState<string>("");
  const [selectedSymptoms, setSelectedSymptoms] = useState<string[]>([]);
  const [selectedMoods, setSelectedMoods] = useState<string[]>([]);
  const [expandedAccordion, setExpandedAccordion] = useState<string | null>(null);

  const syncEntries = async (
    date: string, 
    selectedValues: string[], 
    type: "symptom" | "mood"
  ) => {
    const day = await getDay(date);
    if (!day) return;
  
    const existingEntries =
      type === "symptom" ? await getSymptomEntriesForDay(day.id) : await getMoodEntriesForDay(day.id);
    
    const insertEntry = type === "symptom" ? insertSymptomEntry : insertMoodEntry;
    const deleteEntry = type === "symptom" ? deleteSymptomEntry : deleteMoodEntry;
    const getItem = type === "symptom" ? getSymptom : getMood;
    const insertItem = type === "symptom" ? insertSymptom : insertMood;
  
    for (const value of selectedValues) {
      let item = await getItem(value);
      if (!item) {
        await insertItem(value, true);
        item = await getItem(value);
      }
      if (item) {
        await insertEntry(day.id, item.id);
      }
    }
  
    const selectedIds = await Promise.all(
      selectedValues.map(async (value) => {
        const item = type === "symptom" ? await getSymptom(value) : await getMood(value);
        return item?.id ?? null;
      })
    );
    
    const validIds = selectedIds.filter((id) => id !== null);
    for (const entry of existingEntries) {
      const entryId = type === "symptom" ? (entry as { symptom_id: number }).symptom_id : (entry as { mood_id: number }).mood_id;
      if (
        type === "symptom" && !validIds.includes(entryId) ||
        type === "mood" && !validIds.includes(entryId)
      ) {
        await deleteEntry(entry.id);
      }
    }
  }

  const fetchEntries = async (
    type: "symptom" | "mood"
  ) => {
    const getEntries = type === "symptom" ? getSymptomEntriesForDay : getMoodEntriesForDay;
    const getById = type === "symptom" ? getSymptomByID : getMoodByID;
    const setSelected = type === "symptom" ? setSelectedSymptoms : setSelectedMoods;
  
    const day = await getDay(date);
    if (!day) return;
  
    const entries = await getEntries(day.id);
    const values = await Promise.all(
      entries.map(async (entry) => {
        const id = type === "symptom" ? (entry as { symptom_id: number }).symptom_id : (entry as { mood_id: number }).mood_id;
        const item = await getById(id);
        return item?.name ?? null;
      })
    );
  
    setSelected(values.filter((value) => value !== null) as string[]);
  };

  const fetchNotes = async () => {
    const day = await getDay(date);
    if (day && day.notes) {
      setNotes(day.notes);
    } else {
      setNotes("");
    }
  };

  function onSave() {
    insertDay(date, flow, notes)
    .then(async () => {
      setFlow(flow);
      setExpandedAccordion(null);
      await syncEntries(date, selectedSymptoms, "symptom");
      await syncEntries(date, selectedMoods, "mood");
      await fetchEntries("symptom");
      await fetchEntries("mood");
      await fetchNotes();
    })
  };

  useEffect(() => {
    setFlow(dateFlow);
    fetchEntries("symptom");
    fetchEntries("mood");
    fetchNotes();
    setExpandedAccordion(null);
  }, [dateFlow]);

  return (
    <View style={{ backgroundColor: theme.colors.background }}>
      <View style={styles.titleContainer}>
        <Text variant="titleLarge">
          {new Intl.DateTimeFormat("en-US", {
            weekday: "short",
            month: "short",
            day: "numeric",
            year: "numeric",
          }).format(new Date(date + "T00:00:00"))}
        </Text>
        <Button mode="elevated" onPress={() => onSave()}>
          Save
        </Button>
      </View>
      <View>
        <List.Section>
          <List.Accordion
            title={"Flow Intensity   |   " + flowOptions[flow]}
            expanded={expandedAccordion === "flow"}
            onPress={() =>
              setExpandedAccordion(expandedAccordion === "flow" ? null : "flow")
            }
            left={(props) => <List.Icon {...props} icon="water" />}
          >
            <FlowRadioButtons
              selectedOption={flow}
              setSelectedOption={setFlow}
            />
          </List.Accordion>
          <Divider />

          <List.Accordion
            title={"Symptoms   |   " + selectedSymptoms.length + " Selected"}
            expanded={expandedAccordion === "symptoms"}
            onPress={() =>
              setExpandedAccordion(expandedAccordion === "symptoms" ? null : "symptoms")
            }
            left={(props) => <List.Icon {...props} icon="alert-decagram" />}
          >
            <ChipSelection
              options={symptomOptions}
              selectedValues={selectedSymptoms}
              setSelectedValues={setSelectedSymptoms}
              label="Select Symptoms:"
            />
          </List.Accordion>
          <Divider />
          <List.Accordion
            title={"Moods   |   " + selectedMoods.length + " Selected"}
            expanded={expandedAccordion === "mood"}
            onPress={() =>
              setExpandedAccordion(
                expandedAccordion === "mood" ? null : "mood"
              )
            }
            left={(props) => <List.Icon {...props} icon="emoticon" />}
          >
            <ChipSelection
              options={moodOptions}
              selectedValues={selectedMoods}
              setSelectedValues={setSelectedMoods}
              label="Select Moods:"
            />
          </List.Accordion>
          <Divider />
          <List.Accordion
            title="Medications"
            expanded={expandedAccordion === "medications"}
            onPress={() =>
              setExpandedAccordion(
                expandedAccordion === "medications" ? null : "medications"
              )
            }
            left={(props) => <List.Icon {...props} icon="pill" />}
          >
            <View style={{ padding: 16 }}>
            <Text>Nothing here yet!</Text>
            </View>
          </List.Accordion>
          <Divider />
          <List.Accordion
            title="Notes"
            expanded={expandedAccordion === "notes"}
            onPress={() =>
              setExpandedAccordion(
                expandedAccordion === "notes" ? null : "notes",
              )
            }
            left={(props) => <List.Icon {...props} icon="note" />}
          >
            <View style={{ padding: 16 }}>
              <TextInput
                label="Notes"
                value={notes}
                onChangeText={(notes) => setNotes(notes)}
                placeholder="Add Notes..."
              />
            </View>
          </List.Accordion>
        </List.Section>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  titleContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "space-between",
    padding: 16,
  },
  chipContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  sectionLabel: {
    fontSize: 16,
    fontWeight: "600",
    marginBottom: 8,
  },
});
